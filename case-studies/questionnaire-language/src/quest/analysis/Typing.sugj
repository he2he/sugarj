package quest.analysis;

import quest.lang.Syntax;
import quest.analysis.Naming;

public sugar Typing {
  analyses
    analyze-types
    
  rules
    analyze-types = Questionnaire(id, id, analyze-types)
    analyze-types = QNil
    analyze-types = QCons(analyze-types, analyze-types)
    
    analyze-types = ?Question(QuestType(type), _, _); put-type(|<strip-annos> type) 
    analyze-types =
      DerivedValue(
        QuestType(strip-annos => type), 
        id, 
        QuestExpr(analyze-expr-type; where(retrieve-type => etype)));
      if <equal> (type, etype)
        then put-type(|type)
        else DerivedValue(id, id, QuestExpr(unexpected-type-error(|type)))
      end
    analyze-types = QuestGroup(id, analyze-types)
    analyze-types = ConditionalQuest(analyze-expr-type, analyze-types, ?None + Some(analyze-types))
    analyze-types = ?LocalQuest(Question(QuestType(type), _, _)); put-type(|<strip-annos> type)
    analyze-types =
      ?QuestRef(_);
      where(get-ref-type => type);
      put-type(|type)

    get-ref-type = retrieve-reference; retrieve-type

  rules
    analyze-expr-type = 
      bottomup(try({type: where(type-of-expr => type); put-type(|type)} 
                <+ mark-type-error))
    
    type-of-expr = ?ExprName(_); get-ref-type
    
    type-of-expr = (?Lit(Deci(_)) + ?Lit(Hexa(_)) + ?Lit(Octa(_))); !"Integer"
    type-of-expr = ?Lit(Float(_)); !"Float"
    type-of-expr = ?Lit(Bool(_)); !"Boolean"
    type-of-expr = ?Lit(Char(_)); !"Char"
    type-of-expr = ?Lit(String(_)); !"String"
    
    type-of-expr = is-unary-arith-op#([get-num-type => t1]); !t1
    type-of-expr = is-unary-bool-op#([get-bool-type]); !"Boolean"
    type-of-expr = is-bin-arith-op#([get-num-type => t1, get-num-type => t2]); <join-num-types> (t1, t2)
    type-of-expr = is-bin-arith-comp#([get-num-type, get-num-type]); !"Boolean"
    type-of-expr = is-bin-bool-comp#([get-bool-type, get-bool-type]); !"Boolean"

    join-num-types = (?("Double",_) + ?(_,"Double")); !"Double"
    join-num-types = (?("Float",_) + ?(_,"Float")); !"Float"
    join-num-types = (?("Long",_) + ?(_,"Long")); !"Long"
    join-num-types = !"Integer"
    
    get-num-type = retrieve-type; (?"Byte" + ?"Short" + ?"Integer" + ?"Long" + ?"Float" + ?"Double" + ?"Char")
    get-bool-type = retrieve-type; ?"Boolean"

  rules
    mark-type-error = is-unary-arith-op#(?x;[not(get-num-type)]); <unexpected-type-error(|"any number")> x
    mark-type-error = is-unary-bool-op#([?x;not(has-type(|"Boolean"))]); <unexpected-type-error(|"Boolean")> x
    mark-type-error = is-bin-arith-op#([?x; not(get-num-type), id]); <unexpected-type-error(|"any number")> x
    mark-type-error = is-bin-arith-op#([id, ?x; not(get-num-type)]); <unexpected-type-error(|"any number")> x
    mark-type-error = is-bin-arith-comp#([?x; not(get-num-type), id]); <unexpected-type-error(|"any number")> x
    mark-type-error = is-bin-arith-comp#([id, ?x; not(get-num-type)]); <unexpected-type-error(|"any number")> x
    mark-type-error = is-bin-bool-comp#([?x; not(has-type(|"Boolean")), id]); <unexpected-type-error(|"Boolean")> x
    mark-type-error = is-bin-bool-comp#([id, ?x; not(has-type(|"Boolean"))]); <unexpected-type-error(|"Boolean")> x


  rules
    // Num -> Num
    unary-arith-ops = !["Plus", "Minus", "PreIncr", "PreDecr", "Complement"]
    is-unary-arith-op = <elem> (<id>, <unary-arith-ops>)
    // Bool -> Bool
    unary-bool-ops = !["Not"]
    is-unary-bool-op = <elem> (<id>, <unary-bool-ops>)
    // Num * Num -> Num
    bin-arith-ops = !["Mul", "Div", "Remain", "Plus", "Minus", "LeftShift", "RightShift", "URightShift", "And", "Or", "ExcOr"]
    is-bin-arith-op = <elem> (<id>, <bin-arith-ops>)
    // Num * Num -> Bool
    bin-arith-comps = !["Lt", "Gt", "LtEq", "GtEq", "Eq", "NotEq"]
    is-bin-arith-comp = <elem> (<id>, <bin-arith-comps>)
    // Bool * Bool -> Bool
    bin-bool-comps = !["LazyAnd", "LazyOr", "Eq", "NotEq"]
    is-bin-bool-comp = <elem> (<id>, <bin-bool-comps>)

  rules
    hast-type = where(get-anno(|"type"))
    has-type(|t) = where(retrieve-type; equal(|t)) 
    retrieve-type = get-anno(|"type")
    put-type(|t) = rm-anno(|"type-error"); put-anno(|"type", t)
    
    unexpected-type-error(|expected) =
      if retrieve-type => was
        then put-type-error(|<conc-strings> ("Expected type: ", expected, ", found: ", was))
        else put-type-error(|<conc-strings> ("Expected type: ", expected, ", but no type found"))
      end
    has-type-error = get-anno(|"type-error")
    retrieve-type-error = get-anno(|"type-error")
    put-type-error(|t) = has-name-error <+ put-anno(|"type-error", t)
    
 rules
    constraint-error =
      where(retrieve-type-error => err);
      !(<id>,<conc-strings>("Type error: ", err))
      
    hover-type-info = ?(<conc-strings> ("Type: ", <find-annotation(retrieve-type)>),_,_,_,_)

  references
    hover _ : hover-type-info
}
