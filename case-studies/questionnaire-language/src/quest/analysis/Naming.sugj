package quest.analysis;

import quest.lang.Syntax;

public extension Naming {
  rules
    is-reference = where(get-anno(|"reference"))
    is-reference-to(|t) = where(retrieve-reference; equal(|t)) 
    retrieve-reference = get-anno(|"reference")
    put-reference(|t) = rm-anno(|"name-error");put-anno(|"reference", t)
    
    has-name-error = where(get-anno(|"name-error"))
    retrieve-name-error = get-anno(|"name-error")
    put-name-error(|t) = put-anno(|"name-error", t)
    
  analyses 
    {| LocalQuest, ActiveQuest: analyze-names |}
  
  rules
    analyze-names = Questionnaire(id, id, analyze-names)
    analyze-names = QNil
    analyze-names = QCons(analyze-names, analyze-names)
    
    analyze-names = ?Question(_, QuestId(name), _); new-active-name(|name) 
    analyze-names =
      ?val; DerivedValue(id, QuestId(?name), analyze-expr-names);
      where(<new-active-name(|name)> val)
    analyze-names = QuestGroup(id, analyze-names)
    analyze-names = ConditionalQuest(analyze-expr-names, analyze-names-local-scope, ?None + Some(analyze-names-local-scope))
    analyze-names = ?LocalQuest(Question(_, QuestId(name), _)); new-local-name(|name)
    analyze-names =
      ?QuestRef(QuestId(name)); 
      if <LocalQuest> name => ref
        then put-reference(|ref)
        else put-name-error(|"Could not resolve reference.")
      end;
      new-active-name(|name)

    analyze-names-local-scope = {| LocalQuest: analyze-names |}
    
  rules
    analyze-expr-names = topdown(try(analyze-expr-name))
    analyze-expr-name =
      ?ExprName(Id(name)); 
      if <ActiveQuest> name => ref
        then put-reference(|ref)
        else put-name-error(|"Could not resolve reference.")
      end
      
  rules
    new-local-name(|name) = ?t; rules ( LocalQuest : name{t*} -> t) 
    new-active-name(|name) = ?t; rules ( ActiveQuest : name{t*} -> t) 


  rules
    constraint-error =
      where(retrieve-name-error => err);
      !(<id>,<conc-strings>("Naming error: ", err))
      
    resolve-reference = ?(<find-annotation(retrieve-reference)>,_,_,_,_)
    find-annotation(s) = s <+ ?c#([<find-annotation(s)>])
    
    references-are-resolved = oncetd((?QuestRef(_) + ?ExprName(_));
                                     (is-reference + has-name-error)) 
                           <+ topdown(not(?QuestRef(_) + ?ExprName(_)))

  references
    reference _ : resolve-reference
}
