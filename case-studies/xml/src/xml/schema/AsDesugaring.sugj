package xml.schema; 

import concretesyntax.Stratego;

import xml.ConcreteXml;
import xml.XmlJavaSyntax;
import xml.XmlTextTools;
import xml.Editor;

import xml.schema.AsEditorService;
import xml.schema.SharedStrategies;
import xml.schema.XmlSchemaJavaSyntax;

 
public sugar AsDesugaring {

  // validating XML schemas
  rules
    constraint-error :
      XMLSchemaDoc(Document(pre, root, post)) -> err
      where
        <xml-validate> root => err
    

  // comment out for bootstrapping
    constraint-error :
      XMLSchemaDoc(Document(pre, root, post)) -> (root, "document does not match any Xml schema in scope")
      where
        <not(xml-validate)> root
    
  // validating a document against a schema 
    constraint-error :
      ValWriteDoc(ch,Document(pre, root, post)) -> err
      where
        <xml-validate> root => err

    constraint-error :
      ValWriteDoc(ch,Document(pre, root, post)) -> (root, "no schema for this namespace found")
      where
        <not(xml-validate)> root
    
  desugarings
    xsdDec
    valWriteDocToStrategyCall
  
  rules
    xml-validate = fail
    valWriteDocToStrategyCall = fail
    
  rules
    xsdDec : 
      XsdSugarDec(XsdSugarDecHead(mods, name), doc) 
      ->
      ExtensionDec(ExtensionDecHead(mods, name), ExtensionBody(<conc> (<xsdBody> doc, <schema-editor> doc)))
      
    xsdBody :
      XsdSugarBody(XMLSchemaDoc(xsd))
      -> 
      <xsd2stratego; map(!transformation-elem(<id>))> xsd

  rules
    val-type : type -> <concat-strings> ["validate-type-", type]
    val-type-attval : type -> <concat-strings> ["validate-attval-type-", type]
    val-base : name -> <concat-strings> ["validate-base-", name]
  
        
  
  rules
    // documents
    xsd2stratego : 
      Document(pre, el, post)
      ->
      <xsdElement2stratego(|"")> el
  
  
  // rules for elements of XSD (all having the XSD prefix)
  rules
    // schema root
    xsdElement2stratego(|ignore) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "schema")),
        [Attribute(AttrName(QName(None(), "targetNamespace")), attval)],
        contents,
        _)
      -> result
      where
        <xml-attr-value2string> attval => namespace; 
        <mapconcat(xsdElement2stratego(|namespace);ensure-list <+ ![("translation failed", <id>)])> contents => result
   
    // root element 
    xsdElement2stratego(|namespace) :
      xml |[
        <{http://www.w3.org/2001/XMLSchema}element name=attval1 type=attval2>
        </{http://www.w3.org/2001/XMLSchema}element>
      ]|
      -> 
      |[ rules 
           xml-validate = strategy~namespace-match; strategy~elem-match ]|
      where
	     <xml-attr-value2string> attval1 => ncname ;
	     <xml-attr-value2string> attval2 => typename;
	     <match-namespace> namespace => namespace-match;
	     <match-element> (namespace, ncname, typename) => elem-match
    
    
    // complex types
    xsdElement2stratego(|namespace) :
        Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "complexType")),
        [Attribute(AttrName(QName(None(), "name")), attval)],
        contents,
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "complexType")))
      ->
      [ |[
        rules
          ~(<val-type> typename) :
            Element(name1,attrs,cs,name2) -> <conc> (err1, err2)
            where <strategy~attcheck> attrs => err1;
                  <strategy~contentcheck-all> cs => err2
      ]| ]
      where
        <xml-attr-value2string> attval => typename ;
        <head; complexType2stratego(|typename, namespace)> contents => contentcheck;
        <sequentialize-strategies> [contentcheck, <empty-check> "unexpected element"] => contentcheck-all;

        
        <tail; map(attDecl2stratego(|typename, namespace))> contents => attchecks;
        <conc> (attchecks, [<empty-check> "unexpected attribute"]) => attchecks-all;
        <sequentialize-strategies> attchecks-all => attcheck 
        
  
    // simple types
    xsdElement2stratego(|namespace) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "simpleType")),
        [Attribute(AttrName(QName(None(), "name")), attval)],
        [content],
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "simpleType")))
      ->
      [ |[
        rules
          ~(<val-type> typename) :
            Element(name1,attrs,[c],name2) -> err
            where
              <chardata2string> c => cstring;
              <strategy~simplecheck> (c,cstring) => err
          
          ~(<val-type> typename) :
            Element(name1,attrs,cs,name2) -> [(c, <concat-strings>["type mismatch: expected character data, found ", <write-to-string> cs])]
            where
              <not(?[c]) + (?[c]; not(chardata2string))> cs

          ~(<val-type-attval> typename) :
            attr -> err
            where
              <xml-attr-value2string> attr => attrstring ;
              <strategy~simplecheck> (attr,attrstring) => err
          
          // generate a warning instead (see below)
          ~(<val-type-attval> typename) :
            FromMetaExpr(e) -> []
      ]| ]
      where <xml-attr-value2string> attval => typename;
            <simpleType2stratego(|typename)> content => simplecheck
            
  constraint-warning :
    ValWriteDoc(ch, doc) -> warns
    where
      !"skipping validation of quoted attribute value" => msg;
      <collect-all(\ Attribute(_, e@FromMetaExpr(_)) -> [(e, msg)] \)> doc => warns
    
    
   
  // complex types to stratego
  rules
    // choice
    complexType2stratego(|typename, namespace) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")),
        [],
        contents,
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")))
      -> 
      strat
      where
        <map(complexType2stratego(|typename, namespace))> contents => strats;
        <any-error-free-strategy> strats => strat
  
    // choice max
    complexType2stratego(|typename, namespace) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")),
        [Attribute(AttrName(QName(None(), "maxOccurs")), DoubleQuoted([CharDataPart("unbounded")]))],
        contents,
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")))
      -> 
      |[ repeat-strategy(strategy~strat) ]|
      where
        <map(complexType2stratego(|typename, namespace))> contents => strats;
        <any-error-free-strategy> strats => strat
  
    // sequence
    complexType2stratego(|typename, namespace) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")),
        [],
        contents,
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")))
      -> 
      strat
      where
        <map(complexType2stratego(|typename, namespace))> contents => strats;
        <sequentialize-strategies> strats => strat
  	
  	
  	// sequence max
    complexType2stratego(|typename, namespace) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")),
        [Attribute(AttrName(QName(None(), "maxOccurs")), DoubleQuoted([CharDataPart("unbounded")]))],
        contents,
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")))
      -> 
      |[ repeat-strategy(strategy~strat) ]|
      where
        <map(complexType2stratego(|typename, namespace))> contents => strats;
        <sequentialize-strategies> strats => strat
  	
  	
  	// element
    complexType2stratego(|typename, namespace) :
      xml |[
        <{http://www.w3.org/2001/XMLSchema}element name=attval1 type=attval2>
        </{http://www.w3.org/2001/XMLSchema}element>
      ]|
      ->
      |[ 
      	\ [x | xs] ->
      	  <strategy~(<match-element> (namespace, ncname, eltypename));
      	   (is-error <+ !xs)>
      	  x
      	\
        // +
        // \ [] ->
        //   [([], <concat-strings> ["missing element ", string~ncname, " of namespace ", string~namespace])]
        // \
      ]|
      where
	     <xml-attr-value2string> attval1 => ncname ; 
	     <xml-attr-value2string> attval2 => eltypename
  

  
  // attribute decls
  rules
    attDecl2stratego(|typename, namespace) :
      xml |[
        <{http://www.w3.org/2001/XMLSchema}attribute name=attval1 type=attval2>
        </{http://www.w3.org/2001/XMLSchema}attribute>
      ]|
      ->
      |[
      	\ [x | xs] -> 
	        <strategy~(<match-attribute> (ncname, atttypename));
	         (is-error <+ !xs)> 
	        x
	      \
        // +
        // \ [] ->
        //   [([], <concat-strings> ["missing attribute ", string~ncname])]
        // \
	  ]|
      where
	     <xml-attr-value2string> attval1 => ncname ; 
	     <xml-attr-value2string> attval2 => atttypename
   
   
  // simple types to stratego
  rules
    // restriction
    simpleType2stratego(|typename) :
      Element(
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "restriction")),
        [Attribute(AttrName(QName(None(), "base")), attval)],
        contents,
        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "restriction")))
      ->
      |[ id~(<val-base> basename)
         <+ ?(t,val);
            !(t, <concat-strings>["no base type definition ", string~basename, " for value ", val, " found"])
      ]|
      where <xml-attr-value2string> attval => basename
     
     
    
  
  rules
    any-error-free-strategy : [] -> stratego |[ fail ]|
    any-error-free-strategy :
       [s|ss] -> 
       stratego |[
         {x, serr :
          ?x;
          strategy~s; ?serr;
          if is-error
            then 
              !x; 
              strategy~(<any-error-free-strategy> ss)
              < if is-error then !(serr, <id>); conc else id end
              + !serr
            else id
          end
         }
       ]|
    
    sequentialize-strategies : [] -> stratego |[ id ]|
    sequentialize-strategies :
       [s|ss] -> 
       stratego |[
          strategy~s; 
          if is-error
	          then id
	          else strategy~(<sequentialize-strategies> ss)
	        end
       ]|
    

  rules
    match-namespace :
      namespace -> 
      stratego |[
        ?Element(
          ElemName(QName(Some(URIPrefix(string~namespace)), name1)),
          attributes,
          contents,
          ElemName(QName(Some(URIPrefix(string~namespace)), name2)))
        +
        ?EmptyElement(ElemName(QName(Some(URIPrefix(string~namespace)), name1)), attrbutes2)
        ]|

    match-element :
      (namespace,ncname,typename) -> 
      stratego |[
        {err, doc, attributes, contents, name2 :
         \  doc @
              Element(
				        ElemName(QName(Some(URIPrefix(string~namespace)), string~ncname)),
				        attributes,
				        contents,
				        name2)
            -> err
            where
              <id~(<val-type> typename) <+ ![(doc, <concat-strings>["no type definition ", string~typename, " for element ", string~ncname, " found"])]> doc => err
         \
         }
         <+
         {err, edoc, doc, attributes, name :
         \  edoc@EmptyElement(
                name@ElemName(QName(Some(URIPrefix(string~namespace)), string~ncname)),
                attributes)
            -> err
            where
              !Element(name, attributes, [], name) => doc;
              <id~(<val-type> typename) <+ ![(edoc, <concat-strings>["no type definition ", string~typename, " for element ", string~ncname, " found"])]> doc => err
         \
         }
         <+ ![(<id>, <concat-strings> ["expected element ", string~ncname, " of namespace ", string~namespace])]  
        ]|
    
    match-attribute :
      (ncname, atttypename) ->
      stratego |[
        {err :
        \ att@Attribute(AttrName(QName(None, string~ncname)), attval)
          ->
          err
          where
            <id~(<val-type-attval> atttypename) <+ ![(att, <concat-strings> ["no type definition for ", string~atttypename, " of attribute ", string~ncname, " found"])]> attval => err
        \
        }
        <+ ![(<id>, <concat-strings> ["expected attribute ", string~ncname])]
      ]|
  
    empty-check :
      msg -> 
      stratego |[
        if ?[]
          then ![]
          else is-a-list < (map(!(<id>,string~msg))) + ![(<id>,string~msg)]
        end
      ]|
}
