package html;

import concretesyntax.Java;
import eblock.EBlock;
import org.sugarj.languages.Java;

import html.HtmlJavaSyntax;
import html.HtmlSyntax;
import html.XmlTextTools;
 
public sugar AsSax { 
   
  desugarings
    meta-explode-sax 
	%%  module meta-explode-sax
	
	strategies
	  meta-explode-sax =
	    alltd(explode-write; meta-explode-sax)
	
	  explode-write : 
	    ToMetaStm(WriteDoc(Id(x), c)) -> java_bstm |[ { java_bstm* } ]|
	      where < content-to-stm(|x)
	            ; concat-content
	            ; flatten-list
	            > c => java_bstm*
	 
	  content-to-stm(|java_x) :
	    Document(_,c,_) -> 
	      java_bstm* |[
	         java_x.startDocument();
	         java_bstm*;
	         java_x.endDocument();
	      ]|
	      where <content-to-stms(|java_x)> c => java_bstm*
	
	  /**
	   * @todo  Support namespaces
	   */
	  content-to-stm(|java_x) :
	    Element(ElemName(n), atts, children, ElemName(n')) ->
	      java_bstm* |[
	         java_bstm1*;
	         out.write( ~<java-string-expr> n);
	         // out.write(~(<concat-strings; java-string-expr>["<", n, ">"]));
	         java_bstm2*; 
	         out.write( ~<java-string-expr> n );
	      ]|
	      where <map(content-to-stms(|java_x))> children => java_bstm2*
	          ; new => java_y
	          ; <map(attribute-to-stm(|java_y))> atts => java_bstm1*
              // ; <?None() < "" + <concat-strings> ["{", <?Some(URIPrefix(<id>))> pref, "}"]> pref => pref-string
	
	   content-to-stm(|java_x) :
      EmptyElement(ElemName(n), atts) ->
        java_bstm* |[
           java_bstm1*;
           out.write(~<java-string-expr> n);
        ]|
        where new => java_y
            ; <map(attribute-to-stm(|java_y))> atts => java_bstm1*
	
	  content-to-stm(|java_x) :
	    TextFromMetaExpr(java_e) ->
	    java_bstm |[
	      {|
          String java_y = java_e;
         |
	        java_x.characters( java_y.toCharArray(), 0, java_y.length())
	      |};
	    ]|
	      where new => java_y
	
	  /**
	   * @todo  Escape the special characters in the String.
	   * @todo  Support namespaces
	   */
	  attribute-to-stm(|java_y) :
	    Attribute(AttrName(n), v) -> java_bstm |[ java_y.addAttribute("", ~<java-string-expr> n, ~<java-string-expr> n, "CDATA", java_e); ]|
	      where <attribute-value-to-expr> v => java_e
	
	  attribute-value-to-expr :
	    v -> <java-string-exprs> s
	      where <xml-attr-value2strings> v => s
	
	  /**
	   * Anti-quotation of attribute value to Java.
	   */
	  attribute-value-to-expr :
	    FromMetaExpr(e) -> e
	
	  /**
	   * @todo  Handle all escaped characters
	   */
	  content-to-stm(|java_x) :
	    Text(s) ->
	      java_bstm* |[
	        java_x.characters(new char[]{java_e*}, 0, java_i);
	      ]|
	      where <chardata2string; explode-string> Text(s) => cs
	          ; <length; int-to-string> cs => java_i
	          ; <map(
	                \ '\n' -> |[ '\n' ]| \
	             <+ \ '\r' -> |[ '\r' ]| \
	             <+ \ c    -> <java-char-expr> c \)
	             > cs => java_e*
	
	  content-to-stms(|x) =
	    content-to-stm(|x); (is-list <+ ![<id>])
	
	  concat-content =
	    bottomup( try( \ Conc(l1, l2) -> <conc> (l1, l2) \ ))
    
    
    content-to-stm(|java_x) :
      Comment(_) ->
        java_bstm* |[
          // ;
        ]|
}