module contextanalysis.KindingRelation

import contextanalysis.rules.Syntax
import contextanalysis.rules.Desugaring


============== K-Nat
~C |- Nat :: *


================= K-String
~C |- String :: *


=============== K-Bool
~C |- Bool :: *


~%X :: ~K in ~C
=============== K-TVar
~C |- ~%X :: ~K


~C |- ~T1 :: (~K => *) => ~K => *
~C |- ~T2 :: ~K
================================= K-Mu
~C |- mu (~T1, ~T2) :: *


~C |- ~T1 :: *
~C |- ~T2 :: *
===================== K-Arrow
~C |- ~T1 -> ~T2 :: *


(~C;~%X::~K1) |- ~T2 :: *
=============================== K-Forall
~C |- forall ~%X::~K1. ~T2 :: *


(~C;~%X::~K1) |- ~T2 :: ~K2
================================== K-Abs
~C |- \~%X::~K1. ~T2 :: ~K1 => ~K2 


~C |- ~T1 :: ~K11 => ~K12
~C |- ~T2 :: ~K11
========================= K-App
~C |- ~T1 ~T2 :: ~K12


// ~C |- ~T :: *
=================== K-VariantEnd
~C |- <> :: *


~C |- ~T :: *
~%x notin lab(~decls)
~C |- <~decls> :: *
=========================== K-VariantCons
~C |- <~%x:~T ~:decls> :: *


============= K-RecordNil
~C |- {} :: *


~C |- ~T :: *
~%x notin lab(~decls)
~C |- {~decls} :: *
=========================== K-RecordCons
~C |- {~%x:~T ~:decls} :: *



~C |- ~T1 :: ~K1
~C |- ~T2 :: ~K2
============================== K-Pair
~C |- {~T1, ~T2} :: {~K1, ~K2}


~C |- ~T :: {~K1, ~K2}
====================== K-Fst
~C |- ~T.1 :: ~K1


~C |- ~T :: {~K1, ~K2}
====================== K-Snd
~C |- ~T.2 :: ~K2


============== K-Empty
~C |- [] :: []

