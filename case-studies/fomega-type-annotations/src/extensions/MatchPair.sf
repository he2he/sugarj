module extensions.MatchPair

// An example of an extension that uses typeof and another extension (let)

import org.sugarj.languages.Fomega
import concretesyntax.Fomega
import concretesyntax.Metavars

import extension.Declaration
import extension.TypeOf

import extensions.Let


syntax {
  context-free syntax
    "match" "(" FomegaID "," FomegaID ")" "=" FomegaExpr "in" FomegaExpr -> FomegaExpr {cons("Match")}

  context-free priorities
    FomegaExpr FomegaExpr -> FomegaExpr >
    "match" "(" FomegaID "," FomegaID ")" "=" FomegaExpr "in" FomegaExpr -> FomegaExpr

  lexical syntax
    "match" -> Keyword
    "in"    -> Keyword

  lexical restrictions
    "match" "in" -/- [A-Za-z0-9]
}

desugaring desugar-match-pair {
  desugar-match-pair = desugar-match-pair-let

  desugar-match-pair-let :
    |[ match (~%x1, ~%x2) = ~e1 in ~e2 ]| ->
      |[ let pair = ~e1 in let ~%x1 = pair!fst in let ~%x2 = pair!snd in ~e2 ]|

  // An alternative desugaring that uses only abstractions (i. e. base language
  // expressions) but requires more complicated typeof expressions.
  // It also evaluates ~e1 twice (which would be an issue in a language with
  // side effects).
  desugar-match-pair-abs :
    // TODO: enable concrete syntax
    // |[ match (~%x1, ~%x2) = ~e1 in ~e2 ]| ->
    //   |[ (\~%x1: $(~T1 from typeof ~e1 as {fst:~T1, snd:~T2}).
    //        \~%x2: $(~T2 from typeof ~e2 as {fst:~T1, snd:~T2}). ~e2)
    //      (~e1!fst) (~e1!snd)
    //   ]|
    Match(x1, x2, e1, e2) ->
      App(App(
        Abs(x1, TypeOfAs(Metavar(Var("T1")), e1,
                         TyRecord(TyDeclsCons(TyDecl("fst", Metavar(Var("T1"))),
                                              TyDeclsCons(TyDecl("snd", Metavar(Var("T2"))), TyDeclsNil())))),
          Abs(x2, TypeOfAs(Metavar(Var("T2")), e1,
                           TyRecord(TyDeclsCons(TyDecl("fst", Metavar(Var("T1"))),
                                                TyDeclsCons(TyDecl("snd", Metavar(Var("T2"))), TyDeclsNil())))), e2)),
        SelectRcd(e1, "fst")),
        SelectRcd(e1, "snd"))
}

typing {
  // The pair:~S binding in the context shows that the desugaring introduces a
  // name and that therefore the body ~e2 should not contain that name free.
  // TODO: in future, we should offer support for fresh variables.

  ~C |- ~e1 : ~S
  ~C |- ~S  :: *
  ~C |- ~S ~> {fst:~S1, snd:~S2}
  (((~C; pair:~S); ~%x1:~S1); ~%x2:~S2) |- ~e2 : ~T2
  ================================================== T-MatchPair
  ~C |- match (~%x1, ~%x2) = ~e1 in ~e2 : ~T2
}




