module extensions.DoBlock2

import org.sugarj.languages.Fomega
import concretesyntax.Fomega
import concretesyntax.Metavars

import extension.Declaration


syntax {
  context-free syntax
    "do" "[" FomegaType "]" "{" Statements "}" -> FomegaExpr {cons("DoBlock")}

    FomegaExpr               -> Statements {cons("StatementsEnd")}
    Statement ";" Statements -> Statements {cons("StatementsCons")}

    FomegaID ":" FomegaType "<-" FomegaExpr -> Statement {cons("StatementBind")}
    FomegaExpr                              -> Statement {cons("StatementExpr")}

  context-free syntax
    "~!" StrategoVar -> Statements {cons("Metavar")}

  lexical syntax
    "do" -> FomegaKeyword

  lexical restrictions
    "do" -/- [a-zA-Z0-09]
}

desugaring desugar-do {
  desugar-do :
    fomega-expr |[ do [~T] { ~e } ]|
    ->
    fomega-expr |[ \M::*=>*.
                     \bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B.
                       \return: forall A::*. A -> M A. ~e  ]|

  desugar-do :
    fomega-expr |[ do [~T] { ~%x : ~S <- ~e1; ~!stmts } ]|
    ->
    fomega-expr |[ \M::*=>*.
                     \bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B.
                       \return: forall A::*. A -> M A.
                         bind [~S] [~T] ~e1 (\~%x:~S. do [~T] { ~!stmts } [M] bind return)
                ]|
// 
//   desugar-do :
//     fomega-expr |[ do [~T] {~e1; ~!stmts } ]|
//     ->
//     fomega-expr |[ \M::*=>*.
//                      \bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B.
//                        \return: forall A::*. A -> M A.
//                           bind [$typeof(e1)] [~T] ~e1 ((\y:M ~T. \x:$typeof(e1). y) (do [~T] { ~!stmts } [M] bind return))
//                 ]|
}

typing {
  (~C; M::*=>*) |- ~T :: *
  (((~C; M::*=>*); bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B);
    return: forall A::*. A -> M A) |- ~e : ~R
  (~C; M::*=>*) |- ~R ~> M ~U
  (~C; M::*=>*) |- ~U :: *
  (~C; M::*=>*) |- ~T ~> ~U
  ======================================================================== T-DoEnd
  ~C |- do [~T] { ~e } :
    forall M::*=>*. 
      (forall A::*. forall B::*. M A -> (A -> M B) -> M B) ->
        (forall A::*. A -> M A) -> M ~T

  (~C; M::*=>*) |- ~S :: *
  (~C; M::*=>*) |- ~T :: *
  (((~C; M::*=>*); bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B);
    return: forall A::*. A -> M A) |- ~e1 : ~R1
  (~C; M::*=>*) |- ~R1 ~> M ~U1
  (~C; M::*=>*) |- ~U1 :: *
  (~C; M::*=>*) |- ~S ~> ~U1
  ((((~C; M::*=>*); bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B);
    return: forall A::*. A -> M A); ~%x:~S) |- do [~T] { ~!stmts } :
      forall M::*=>*. 
        (forall A::*. forall B::*. M A -> (A -> M B) -> M B) ->
          (forall A::*. A -> M A) -> M ~T
  =========================================================================== T-DoCons
  ~C |- do [~T] { ~%x : ~S <- ~e1; ~!stmts } :
    forall M::*=>*. 
      (forall A::*. forall B::*. M A -> (A -> M B) -> M B) ->
        (forall A::*. A -> M A) -> M ~T

  // (~C; M::*=>*) |- ~T :: *
  // (((~C; M::*=>*); bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B);
  //   return: forall A::*. A -> M A) |- ~e1 : ~R1
  // (~C; M::*=>*) |- ~R1 ~> M ~U1
  // (~C; M::*=>*) |- ~U1 :: *
  // ((((~C; M::*=>*); bind:forall A::*. forall B::*. M A -> (A -> M B) -> M B);
  //   return: forall A::*. A -> M A)) |- do [~T] { ~!stmts } :
  //     forall M::*=>*. 
  //       (forall A::*. forall B::*. M A -> (A -> M B) -> M B) ->
  //         (forall A::*. A -> M A) -> M ~T
  // =========================================================================== T-DoConsExp
  // ~C |- do [~T] { ~e1; ~!stmts } :
  //   forall M::*=>*. 
  //     (forall A::*. forall B::*. M A -> (A -> M B) -> M B) ->
  //       (forall A::*. A -> M A) -> M ~T
}
